/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.90.0
  Forc version: 0.60.0
  Fuel-Core version: 0.30.0
*/

import type {
  BN,
  BigNumberish,
  Bytes,
  Contract,
  EvmAddress,
  FunctionFragment,
  Interface,
  InvokeFunction,
  StdString,
} from "fuels"

import type { Enum, Option } from "./common"

export enum AccessErrorInput {
  NotOwner = "NotOwner",
}
export enum AccessErrorOutput {
  NotOwner = "NotOwner",
}
export enum GuildActionInput {
  Joined = "Joined",
  Owner = "Owner",
  Admin = "Admin",
}
export enum GuildActionOutput {
  Joined = "Joined",
  Owner = "Owner",
  Admin = "Admin",
}
export type IdentityInput = Enum<{
  Address: AddressInput
  ContractId: ContractIdInput
}>
export type IdentityOutput = Enum<{
  Address: AddressOutput
  ContractId: ContractIdOutput
}>
export enum InitErrorInput {
  AlreadyInitialized = "AlreadyInitialized",
  NotInitialized = "NotInitialized",
}
export enum InitErrorOutput {
  AlreadyInitialized = "AlreadyInitialized",
  NotInitialized = "NotInitialized",
}
export enum InitializationErrorInput {
  CannotReinitialized = "CannotReinitialized",
}
export enum InitializationErrorOutput {
  CannotReinitialized = "CannotReinitialized",
}
export type MetadataInput = Enum<{
  B256: string
  Bytes: Bytes
  Int: BigNumberish
  String: StdString
}>
export type MetadataOutput = Enum<{
  B256: string
  Bytes: Bytes
  Int: BN
  String: StdString
}>
export type StateInput = Enum<{
  Uninitialized: []
  Initialized: IdentityInput
  Revoked: []
}>
export type StateOutput = Enum<{
  Uninitialized: []
  Initialized: IdentityOutput
  Revoked: []
}>
export enum TokenErrorInput {
  AlreadyClaimed = "AlreadyClaimed",
  AlreadyBurned = "AlreadyBurned",
  ExpiredSignature = "ExpiredSignature",
  InvalidSignature = "InvalidSignature",
  InvalidAssetId = "InvalidAssetId",
  InvalidContractId = "InvalidContractId",
  InsufficientAmount = "InsufficientAmount",
  PinIdDoesNotExist = "PinIdDoesNotExist",
  NotPinOwner = "NotPinOwner",
  CouldNotRemoveEntry = "CouldNotRemoveEntry",
}
export enum TokenErrorOutput {
  AlreadyClaimed = "AlreadyClaimed",
  AlreadyBurned = "AlreadyBurned",
  ExpiredSignature = "ExpiredSignature",
  InvalidSignature = "InvalidSignature",
  InvalidAssetId = "InvalidAssetId",
  InvalidContractId = "InvalidContractId",
  InsufficientAmount = "InsufficientAmount",
  PinIdDoesNotExist = "PinIdDoesNotExist",
  NotPinOwner = "NotPinOwner",
  CouldNotRemoveEntry = "CouldNotRemoveEntry",
}

export type AddressInput = { bits: string }
export type AddressOutput = AddressInput
export type AssetIdInput = { bits: string }
export type AssetIdOutput = AssetIdInput
export type ClaimParametersInput = {
  recipient: AddressInput
  action: GuildActionInput
  user_id: BigNumberish
  guild_id: BigNumberish
  guild_name: string
  created_at: BigNumberish
  signed_at: BigNumberish
  chain_id: BigNumberish
  cid: string
  admin_treasury: IdentityInput
  admin_fee: BigNumberish
  contract_id: ContractIdInput
}
export type ClaimParametersOutput = {
  recipient: AddressOutput
  action: GuildActionOutput
  user_id: BN
  guild_id: BN
  guild_name: string
  created_at: BN
  signed_at: BN
  chain_id: BN
  cid: string
  admin_treasury: IdentityOutput
  admin_fee: BN
  contract_id: ContractIdOutput
}
export type ContractIdInput = { bits: string }
export type ContractIdOutput = ContractIdInput
export type ContractInitializedInput = {
  owner: IdentityInput
  signer: EvmAddress
  treasury: IdentityInput
  fee: BigNumberish
}
export type ContractInitializedOutput = {
  owner: IdentityOutput
  signer: EvmAddress
  treasury: IdentityOutput
  fee: BN
}
export type FeeChangedInput = { old: BigNumberish; new: BigNumberish }
export type FeeChangedOutput = { old: BN; new: BN }
export type OwnershipSetInput = { new_owner: IdentityInput }
export type OwnershipSetOutput = { new_owner: IdentityOutput }
export type OwnershipTransferredInput = {
  new_owner: IdentityInput
  previous_owner: IdentityInput
}
export type OwnershipTransferredOutput = {
  new_owner: IdentityOutput
  previous_owner: IdentityOutput
}
export type PinBurnedInput = { pin_owner: AddressInput; pin_id: BigNumberish }
export type PinBurnedOutput = { pin_owner: AddressOutput; pin_id: BN }
export type PinMintedInput = { recipient: AddressInput; pin_id: BigNumberish }
export type PinMintedOutput = { recipient: AddressOutput; pin_id: BN }
export type SignerChangedInput = { old: EvmAddress; new: EvmAddress }
export type SignerChangedOutput = SignerChangedInput
export type TreasuryChangedInput = { old: IdentityInput; new: IdentityInput }
export type TreasuryChangedOutput = { old: IdentityOutput; new: IdentityOutput }

export type GuildPinContractAbiConfigurables = {
  NAME: string
  SYMBOL: string
  OWNER: IdentityInput
  SIGNER: string
  SIGNATURE_VALIDITY_PERIOD: BigNumberish
  TREASURY: IdentityInput
  FEE: BigNumberish
}

interface GuildPinContractAbiInterface extends Interface {
  functions: {
    initialize: FunctionFragment
    set_fee: FunctionFragment
    set_owner: FunctionFragment
    set_signer: FunctionFragment
    set_treasury: FunctionFragment
    fee: FunctionFragment
    signer: FunctionFragment
    treasury: FunctionFragment
    burn: FunctionFragment
    claim: FunctionFragment
    balance_of: FunctionFragment
    pin_id_by_address: FunctionFragment
    pin_id_by_user_id: FunctionFragment
    pin_owner: FunctionFragment
    total_minted: FunctionFragment
    total_minted_per_guild: FunctionFragment
    owner: FunctionFragment
    decimals: FunctionFragment
    name: FunctionFragment
    symbol: FunctionFragment
    total_assets: FunctionFragment
    total_supply: FunctionFragment
    metadata: FunctionFragment
    encoded_metadata: FunctionFragment
    pin_metadata: FunctionFragment
  }
}

export class GuildPinContractAbi extends Contract {
  interface: GuildPinContractAbiInterface
  functions: {
    initialize: InvokeFunction<[], void>
    set_fee: InvokeFunction<[fee: BigNumberish], void>
    set_owner: InvokeFunction<[owner: IdentityInput], void>
    set_signer: InvokeFunction<[signer: EvmAddress], void>
    set_treasury: InvokeFunction<[treasury: IdentityInput], void>
    fee: InvokeFunction<[], BN>
    signer: InvokeFunction<[], string>
    treasury: InvokeFunction<[], IdentityOutput>
    burn: InvokeFunction<[pin_id: BigNumberish], void>
    claim: InvokeFunction<[params: ClaimParametersInput, signature: string], void>
    balance_of: InvokeFunction<[id: AddressInput], BN>
    pin_id_by_address: InvokeFunction<
      [user: AddressInput, guild_id: BigNumberish, action: GuildActionInput],
      Option<BN>
    >
    pin_id_by_user_id: InvokeFunction<
      [user_id: BigNumberish, guild_id: BigNumberish, action: GuildActionInput],
      Option<BN>
    >
    pin_owner: InvokeFunction<[pin_id: BigNumberish], Option<AddressOutput>>
    total_minted: InvokeFunction<[], BN>
    total_minted_per_guild: InvokeFunction<[guild_id: BigNumberish], BN>
    owner: InvokeFunction<[], StateOutput>
    decimals: InvokeFunction<[asset: AssetIdInput], Option<number>>
    name: InvokeFunction<[asset: AssetIdInput], Option<StdString>>
    symbol: InvokeFunction<[asset: AssetIdInput], Option<StdString>>
    total_assets: InvokeFunction<[], BN>
    total_supply: InvokeFunction<[asset: AssetIdInput], Option<BN>>
    metadata: InvokeFunction<
      [asset_id: AssetIdInput, key: StdString],
      Option<MetadataOutput>
    >
    encoded_metadata: InvokeFunction<[pin_id: BigNumberish], StdString>
    pin_metadata: InvokeFunction<[pin_id: BigNumberish], StdString>
  }
}
